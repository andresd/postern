import { app, BrowserWindow, dialog, ipcMain, IpcMainInvokeEvent } from 'electron'
import { setMainWindow } from './server'
import fs from 'fs'
import { startServer } from '@postern/engine'
import { terminal } from '@postern/core'
import { writeToTerminal } from './server/globals'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
      nodeIntegration: true,
      contextIsolation: true
    }
  })

  // and load the index.html of the app.
  // eslint-disable-next-line @typescript-eslint/no-floating-promises
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()

  setMainWindow(mainWindow)
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow()
  terminal.setOutputMethod(writeToTerminal)
  startServer()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('saveAs', async (_event: IpcMainInvokeEvent, fileContent: string) => {
  const options = {
    title: 'Save file',
    defaultPath: 'endpoints',
    buttonLabel: 'Save',
    filters: [
      { name: 'yml, yaml', extensions: ['*.yml; *.yaml'] },
      { name: 'All Files', extensions: ['*'] }
    ]
  }

  const { filePath, canceled } = await dialog.showSaveDialog(options)
  if (!canceled && filePath) {
    fs.writeFileSync(filePath, fileContent, 'utf-8')
  }
})
